{# src/ModuloChat/templates/chat.html.twig #}
{% extends 'base.html.twig' %}

{% block title %}Chat{% endblock %}

{% block stylesheets %}
<style>
    .chat-container {
        display: flex;
        height: 100vh;
        max-height: 800px;
    }
    
    .chat-sidebar {
        width: 300px;
        border-right: 1px solid #ddd;
        overflow-y: auto;
        background-color: #f5f5f5;
    }
    
    .chat-main {
        flex: 1;
        display: flex;
        flex-direction: column;
    }
    
    .chat-header {
        padding: 15px;
        border-bottom: 1px solid #ddd;
        background-color: #f9f9f9;
    }
    
    .chat-messages {
        flex: 1;
        overflow-y: auto;
        padding: 15px;
        display: flex;
        flex-direction: column-reverse;
    }
    
    .chat-input {
        border-top: 1px solid #ddd;
        padding: 15px;
        background-color: #f9f9f9;
    }
    
    .chat-input input {
        width: 80%;
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 4px;
    }
    
    .chat-input button {
        padding: 8px 15px;
        background-color: #4caf50;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }
    
    .chat-list-item {
        padding: 15px;
        border-bottom: 1px solid #ddd;
        cursor: pointer;
    }
    
    .chat-list-item:hover {
        background-color: #e9e9e9;
    }
    
    .chat-list-item.active {
        background-color: #e1e1e1;
    }
    
    .message {
        margin-bottom: 15px;
        max-width: 80%;
    }
    
    .message-sent {
        align-self: flex-end;
        background-color: #dcf8c6;
        padding: 10px;
        border-radius: 8px;
    }
    
    .message-received {
        align-self: flex-start;
        background-color: #f1f0f0;
        padding: 10px;
        border-radius: 8px;
    }
    
    .message-system {
        align-self: center;
        background-color: #f8f8f8;
        padding: 5px 10px;
        border-radius: 15px;
        font-size: 0.8em;
        color: #777;
    }
    
    .chat-actions {
        padding: 15px;
        border-top: 1px solid #ddd;
    }
    
    .modal {
        display: none;
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0,0,0,0.4);
    }
    
    .modal-content {
        background-color: white;
        margin: 15% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
        max-width: 500px;
    }
    
    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
    }
</style>
{% endblock %}

{% block body %}
<div class="chat-container">
    <div class="chat-sidebar">
        <h2 style="padding: 15px;">Chats</h2>
        
        <div class="chat-list">
            {% for chat in chats %}
                <div class="chat-list-item" data-chat-id="{{ chat.id }}">
                    <strong>{{ chat.name }}</strong>
                    <div>
                        {% set otherParticipant = null %}
                        {% for participant in chat.participants %}
                            {% if participant.participantIdentifier != userId %}
                                {% set otherParticipant = participant %}
                            {% endif %}
                        {% endfor %}
                        
                        {% if otherParticipant %}
                            {{ otherParticipant.participantName }}
                        {% else %}
                            Chat privado
                        {% endif %}
                    </div>
                </div>
            {% else %}
                <div style="padding: 15px;">No tienes chats activos</div>
            {% endfor %}
        </div>
        
        <div class="chat-actions">
            <button id="btnNewChat">Nuevo chat</button>
        </div>
    </div>
    
    <div class="chat-main" id="chatMain">
        <div style="display: flex; height: 100%; align-items: center; justify-content: center;">
            <h3>Selecciona un chat para comenzar</h3>
        </div>
    </div>
</div>

<!-- Modal para nuevo chat privado -->
<div id="chatModal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h2>Nuevo chat</h2>
        <form id="chatForm">
            <div style="margin-bottom: 15px;">
                <label for="recipientId">ID del destinatario:</label>
                <input type="text" id="recipientId" name="recipientId" required>
            </div>
            <div style="margin-bottom: 15px;">
                <label for="recipientName">Nombre del destinatario:</label>
                <input type="text" id="recipientName" name="recipientName" required>
            </div>
            <button type="submit">Crear chat</button>
        </form>
    </div>
</div>

{% block javascripts %}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Variables para el modal
        const chatModal = document.getElementById('chatModal');
        const btnNewChat = document.getElementById('btnNewChat');
        const closeBtn = document.querySelector('.close');
        
        // Abrir modal
        btnNewChat.addEventListener('click', function() {
            chatModal.style.display = "block";
        });
        
        // Cerrar modal
        closeBtn.addEventListener('click', function() {
            chatModal.style.display = "none";
        });
        
        // Cerrar al hacer clic fuera
        window.addEventListener('click', function(event) {
            if (event.target == chatModal) {
                chatModal.style.display = "none";
            }
        });
        
        // Evitar múltiples envíos del formulario
        let isSubmitting = false;
        
        // Manejar el envío del formulario de chat
        document.getElementById('chatForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            if (isSubmitting) return;
            isSubmitting = true;
            
            const recipientId = document.getElementById('recipientId').value;
            const recipientName = document.getElementById('recipientName').value;
            const submitButton = this.querySelector('button[type="submit"]');
            
            // Deshabilitar el botón mientras se procesa
            if (submitButton) submitButton.disabled = true;
            
            fetch('/chat/create/private', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: new URLSearchParams({
                    'recipientId': recipientId,
                    'recipientName': recipientName
                })
            })
            .then(response => response.json())
            .then(data => {
                isSubmitting = false;
                if (submitButton) submitButton.disabled = false;
                
                if (data.success) {
                    chatModal.style.display = "none";
                    // Simplemente recarga la página para mostrar el nuevo chat
                    window.location.reload();
                } else {
                    alert('Error: ' + data.error);
                }
            })
            .catch(error => {
                isSubmitting = false;
                if (submitButton) submitButton.disabled = false;
                console.error('Error:', error);
                alert('Ha ocurrido un error al crear el chat.');
            });
        });
        
        // Cargar un chat cuando se hace clic en la lista
        document.querySelectorAll('.chat-list-item').forEach(function(item) {
            item.addEventListener('click', function() {
                // Eliminar la clase active de cualquier otro item
                document.querySelectorAll('.chat-list-item').forEach(function(el) {
                    el.classList.remove('active');
                });
                
                // Agregar la clase active al elemento actual
                this.classList.add('active');
                
                // Cargar el chat
                const chatId = this.getAttribute('data-chat-id');
                loadChat(chatId);
            });
        });
        
        // Función para cargar un chat
        function loadChat(chatId) {
            fetch('/chat/' + chatId)
                .then(response => response.text())
                .then(html => {
                    document.getElementById('chatMain').innerHTML = html;
                    
                    // Configurar el formulario de envío de mensajes
                    const messageForm = document.getElementById('messageForm');
                    if (messageForm) {
                        messageForm.addEventListener('submit', function(e) {
                            e.preventDefault();
                            
                            const chatId = this.getAttribute('data-chat-id');
                            const messageInput = document.getElementById('messageInput');
                            const content = messageInput.value.trim();
                            
                            if (content) {
                                sendMessage(chatId, content);
                                messageInput.value = '';
                            }
                        });
                    }
                    
                    // Hacer scroll al último mensaje
                    const messagesContainer = document.querySelector('.chat-messages');
                    if (messagesContainer) {
                        messagesContainer.scrollTop = messagesContainer.scrollHeight;
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Ha ocurrido un error al cargar el chat.');
                });
        }
        
        // Función para enviar un mensaje
        function sendMessage(chatId, content) {
            fetch('/chat/send/' + chatId, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: new URLSearchParams({
                    'content': content
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Actualizar la vista de mensajes
                    const messagesContainer = document.querySelector('.chat-messages');
                    
                    const messageDiv = document.createElement('div');
                    messageDiv.className = 'message message-sent';
                    messageDiv.innerHTML = `
                        <div><strong>${data.message.sender}</strong></div>
                        <div>${data.message.content}</div>
                        <div><small>${data.message.timestamp}</small></div>
                    `;
                    
                    messagesContainer.prepend(messageDiv);
                } else {
                    alert('Error: ' + data.error);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Ha ocurrido un error al enviar el mensaje.');
            });
        }
    });
</script>
{% endblock %}
{% endblock %}