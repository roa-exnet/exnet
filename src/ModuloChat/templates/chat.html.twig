{# src/ModuloChat/templates/chat.html.twig #}
{% extends 'base.html.twig' %}

{% block title %}Chat{% endblock %}

{% block head %}
    {{ parent() }}
    <link rel="stylesheet" href="{{ asset('css/chat.css') }}">
{% endblock %}

{% block body %}
<div class="chat-container">
    <div class="chat-sidebar">
        <h2 style="padding: 15px;">Chats</h2>
        
        <div class="chat-list">
            <div style="padding: 15px;">Cargando conversaciones...</div>
        </div>
        
        <div class="chat-actions">
            <button id="btnNewChat">Nuevo chat</button>
        </div>
    </div>
    
    <div class="chat-main" id="chatMain">
        <div style="display: flex; height: 100%; align-items: center; justify-content: center;">
            <h3>Selecciona un chat para comenzar</h3>
        </div>
    </div>
</div>

<div id="chatModal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h2>Nuevo chat</h2>
        <form id="chatForm">
            <div style="margin-bottom: 15px;">
                <label for="chatName">Nombre del chat:</label>
                <input type="text" id="chatName" name="chatName" required>
            </div>
            <div style="margin-bottom: 15px;" class="form-user-search">
                <label for="userSearch">Buscar usuario:</label>
                <div class="search-container">
                    <input type="text" id="userSearch" name="userSearch" placeholder="Buscar por nombre o email...">
                    <div id="searchResults" class="search-results"></div>
                </div>
                <div id="selectedUsers" class="selected-users"></div>
                <input type="hidden" id="recipientIds" name="recipientIds">
            </div>
            <button type="submit">Crear chat</button>
        </form>
    </div>
</div>

{% block javascripts %}
<script src="https://cdn.socket.io/4.7.2/socket.io.min.js"></script>
<script>

document.addEventListener('DOMContentLoaded', function() {
    const userId = {{ userId|json_encode|raw }};
    const userName = {{ userName|json_encode|raw }};
    const websocketUrl = {{ websocketUrl|json_encode|raw }};
    
    console.log('Inicializando chat con:', { userId, userName, websocketUrl });
    
    const socket = io(websocketUrl);
    let currentRoomId = null;
    let isAuthenticated = false;
    
    const sentMessageIds = new Set();
    
    socket.on('connect', () => {
        console.log('Conectado al servidor WebSocket');
        
        console.log('Enviando autenticación con:', { userId, userName });
        socket.emit('authenticate', { userId, userName });
    });
    
    socket.on('authenticated', (data) => {
        console.log('Autenticado con éxito como:', data);
        isAuthenticated = true;
        
        loadUserRooms();
    });
    
    socket.on('disconnect', () => {
        console.log('Desconectado del servidor WebSocket');
        isAuthenticated = false;
    });
    
    socket.on('error', (error) => {
        console.error('Error WebSocket:', error);
        if (error.message && error.message.includes('not authenticated')) {
            socket.emit('authenticate', { userId, userName });
        }
    });
    
    socket.on('message', (message) => {
        console.log('Mensaje recibido del servidor WebSocket:', message);
        if (message.roomId === currentRoomId) {
            if (!sentMessageIds.has(message.id)) {
                addMessageToChat({
                    senderId: message.senderId,
                    senderName: message.senderName,
                    content: message.content,
                    type: message.type || 'text',
                    timestamp: new Date(message.timestamp)
                });
                
                sentMessageIds.add(message.id);
                
                if (sentMessageIds.size > 100) {
                    const iterator = sentMessageIds.values();
                    sentMessageIds.delete(iterator.next().value);
                }
            }
        }
    });
    
    socket.on('user_typing', (data) => {
        if (data.roomId === currentRoomId && data.userId !== userId) {
            updateTypingIndicator(data);
        }
    });
    
    socket.on('room_created', (data) => {
        console.log('Nueva sala creada:', data);
        loadUserRooms();
    });
    
    const chatModal = document.getElementById('chatModal');
    const btnNewChat = document.getElementById('btnNewChat');
    const closeBtn = document.querySelector('.close');
    
    const userSearch = document.getElementById('userSearch');
    const searchResults = document.getElementById('searchResults');
    const selectedUsers = document.getElementById('selectedUsers');
    const recipientIdsInput = document.getElementById('recipientIds');
    let selectedRecipients = [];
    
    let searchTimeout;
    userSearch.addEventListener('input', function() {
        clearTimeout(searchTimeout);
        const query = this.value.trim();
        
        if (query.length < 2) {
            searchResults.innerHTML = '';
            searchResults.style.display = 'none';
            return;
        }
        
        searchTimeout = setTimeout(() => {
            simulateUserSearch(query);
        }, 300);
    });
    
    function simulateUserSearch(query) {
        searchResults.innerHTML = '<div class="loading">Buscando usuarios...</div>';
        searchResults.style.display = 'block';
        
        fetch(`/chat/api/users/search?q=${encodeURIComponent(query)}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Error en la respuesta del servidor: ' + response.status);
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    console.log(`Encontrados ${data.users.length} usuarios para la consulta: "${query}"`);
                    displaySearchResults(data.users);
                } else {
                    console.error('Error en la búsqueda:', data.error || 'Error desconocido');
                    searchResults.innerHTML = '<div class="no-results">Error al buscar usuarios</div>';
                    searchResults.style.display = 'block';
                }
            })
            .catch(error => {
                console.error('Error al buscar usuarios:', error);
                searchResults.innerHTML = '<div class="no-results">Error al conectar con el servidor</div>';
                searchResults.style.display = 'block';
            });
    }
    
    function displaySearchResults(users) {
        searchResults.innerHTML = '';
        
        if (!users || users.length === 0) {
            searchResults.innerHTML = '<div class="no-results">No se encontraron usuarios</div>';
            searchResults.style.display = 'block';
            return;
        }
        
        users.forEach(user => {
            if (selectedRecipients.some(selected => selected.id === user.id)) {
                return;
            }
            
            const userElement = document.createElement('div');
            userElement.className = 'user-result';
            userElement.innerHTML = `
                <div class="user-info">
                    <div class="user-name">${user.nombre}</div>
                    <div class="user-email">${user.email}</div>
                </div>
            `;
            
            userElement.addEventListener('click', () => {
                selectUser(user);
                searchResults.style.display = 'none';
                userSearch.value = '';
            });
            
            searchResults.appendChild(userElement);
        });
        
        searchResults.style.display = 'block';
    }
    
    function selectUser(user) {
        if (selectedRecipients.some(selected => selected.id === user.id)) {
            return;
        }
        
        selectedRecipients.push(user);
        updateSelectedUsers();
        updateRecipientIds();
    }
    
    function updateSelectedUsers() {
        selectedUsers.innerHTML = '';
        
        selectedRecipients.forEach(user => {
            const userTag = document.createElement('div');
            userTag.className = 'user-tag';
            userTag.innerHTML = `
                <span>${user.nombre}</span>
                <button type="button" class="remove-user" data-id="${user.id}">&times;</button>
            `;
            
            selectedUsers.appendChild(userTag);
        });
        
        document.querySelectorAll('.remove-user').forEach(button => {
            button.addEventListener('click', function() {
                const userId = parseInt(this.getAttribute('data-id'));
                selectedRecipients = selectedRecipients.filter(user => user.id !== userId);
                updateSelectedUsers();
                updateRecipientIds();
            });
        });
        
        selectedUsers.style.display = selectedRecipients.length > 0 ? 'flex' : 'none';
    }
    
    function updateRecipientIds() {
        const ids = selectedRecipients.map(user => user.id);
        recipientIdsInput.value = ids.join(',');
    }
    
    btnNewChat.addEventListener('click', function() {
        chatModal.style.display = "block";
        document.getElementById('chatForm').reset();
        selectedRecipients = [];
        updateSelectedUsers();
        updateRecipientIds();
    });
    
    closeBtn.addEventListener('click', function() {
        chatModal.style.display = "none";
    });
    
    window.addEventListener('click', function(event) {
        if (event.target == chatModal) {
            chatModal.style.display = "none";
        }
    });
    
    document.addEventListener('click', function(event) {
        if (!event.target.closest('.search-container')) {
            searchResults.style.display = 'none';
        }
    });
    
    let isSubmitting = false;
    
    document.getElementById('chatForm').addEventListener('submit', function(e) {
        e.preventDefault();
        
        if (isSubmitting) return;
        isSubmitting = true;
        
        const chatName = document.getElementById('chatName').value;
        const recipientIds = document.getElementById('recipientIds').value.split(',');
        const submitButton = this.querySelector('button[type="submit"]');
        
        if (recipientIds.length === 0 || recipientIds[0] === '') {
            alert('Debes seleccionar al menos un destinatario');
            isSubmitting = false;
            return;
        }
        
        if (submitButton) submitButton.disabled = true;
        
        createRoom(chatName, recipientIds)
            .then(data => {
                isSubmitting = false;
                if (submitButton) submitButton.disabled = false;
                
                chatModal.style.display = "none";
                loadUserRooms();
            })
            .catch(error => {
                isSubmitting = false;
                if (submitButton) submitButton.disabled = false;
                console.error('Error:', error);
                alert('Ha ocurrido un error al crear el chat.');
            });
    });
    
    function createRoom(name, participantIds) {
        return fetch(`/chat/rooms`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                name,
                participantIds
            })
        }).then(response => {
            if (!response.ok) {
                throw new Error('Error al crear la sala');
            }
            return response.json();
        });
    }

function loadUserRooms() {
    console.log('Cargando salas del usuario...');
    fetch(`/chat/user/rooms`)
        .then(response => {
            if (!response.ok) {
                throw new Error(`Error de servidor: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            console.log('Salas obtenidas:', data);
            const chatList = document.querySelector('.chat-list');
            
            if (!data.success) {
                chatList.innerHTML = `<div style="padding: 15px;">Error: ${data.error || 'Error desconocido'}</div>`;
                return;
            }
            
            if (!data.rooms || data.rooms.length === 0) {
                chatList.innerHTML = '<div style="padding: 15px;">No tienes chats disponibles</div>';
                return;
            }
            
            chatList.innerHTML = '';
            
            data.rooms.sort((a, b) => {
                if (a.lastActivity && b.lastActivity) {
                    return new Date(b.lastActivity) - new Date(a.lastActivity);
                }
                return new Date(b.createdAt) - new Date(a.createdAt);
            });
            
            data.rooms.forEach(room => {
                const roomElement = document.createElement('div');
                roomElement.className = 'chat-list-item';
                roomElement.setAttribute('data-room-id', room.id);
                roomElement.innerHTML = `
                    <strong>${room.name}</strong>
                    <div>
                        <small>${room.participants} participante(s)</small>
                    </div>
                `;
                
                roomElement.addEventListener('click', function() {
                    document.querySelectorAll('.chat-list-item').forEach(el => {
                        el.classList.remove('active');
                    });
                    this.classList.add('active');
                    
                    const roomId = this.getAttribute('data-room-id');
                    loadRoom(roomId);
                });
                
                chatList.appendChild(roomElement);
            });
        })
        .catch(error => {
            console.error('Error al cargar las salas del usuario:', error);
            document.querySelector('.chat-list').innerHTML = 
                `<div style="padding: 15px; color: red;">Error al cargar las salas: ${error.message}</div>`;
        });
}
        
function loadRoom(roomId) {
    if (!isAuthenticated) {
        console.warn('Intentando cargar sala sin estar autenticado, reintentando autenticación...');
        socket.emit('authenticate', { userId, userName });
        setTimeout(() => {
            if (isAuthenticated) loadRoom(roomId);
        }, 1000);
        return;
    }
    
    console.log(`Cargando sala ${roomId}...`);
    
    if (currentRoomId) {
        console.log(`Saliendo de la sala anterior ${currentRoomId}...`);
        socket.emit('leave_room', { roomId: currentRoomId, userId });
    }
    
    currentRoomId = roomId;
    
    console.log(`Uniéndose a la sala ${roomId}...`);
    socket.emit('join_room', { roomId, userId });
    
    fetch(`/chat/rooms/${roomId}`)
        .then(response => {
            if (!response.ok) {
                throw new Error(`Error de servidor: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            console.log('Datos de la sala recibidos:', data);
            
            if (!data.success) {
                throw new Error(data.error || 'Error desconocido');
            }
            
            const chatMain = document.getElementById('chatMain');
            
            chatMain.style.position = 'relative';
            
            chatMain.innerHTML = `
                <div class="chat-header">
                    <h2>${data.room.name}</h2>
                    <div class="participants-count">${data.room.participants.length} participantes</div>
                </div>
                <div class="chat-messages"></div>
                <div class="chat-input">
                    <input type="text" id="messageInput" placeholder="Escribe un mensaje...">
                    <button id="sendButton">Enviar</button>
                </div>
            `;
            
            const typingIndicator = document.createElement('div');
            typingIndicator.className = 'typing-indicator';
            typingIndicator.id = 'typingIndicator';
            typingIndicator.style.display = 'none';
            typingIndicator.textContent = 'Alguien está escribiendo...'; 
            
            const chatInput = chatMain.querySelector('.chat-input');
            chatMain.insertBefore(typingIndicator, chatInput);
            
            const messagesContainer = document.querySelector('.chat-messages');
            
            if (data.messages && data.messages.length > 0) {
                console.log(`Mostrando ${data.messages.length} mensajes en orden cronológico`);
                
                data.messages.forEach(message => {
                    addMessageToChatOrdered({
                        id: message.id,
                        senderId: message.senderId,
                        senderName: message.senderName,
                        content: message.content,
                        type: message.type,
                        timestamp: new Date(message.sentAt)
                    }, false);
                });
                
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            } else {
                messagesContainer.innerHTML = '<div class="no-messages">Aún no hay mensajes en este chat.</div>';
            }
            
            const messageInput = document.getElementById('messageInput');
            const sendButton = document.getElementById('sendButton');
            
            sendButton.addEventListener('click', () => {
                sendMessage();
            });
            
            messageInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    sendMessage();
                }
            });
            
            let typingTimeout;
            messageInput.addEventListener('input', () => {
                socket.emit('typing', { roomId, isTyping: true });
                
                clearTimeout(typingTimeout);
                typingTimeout = setTimeout(() => {
                    socket.emit('typing', { roomId, isTyping: false });
                }, 1000);
            });
        })
        .catch(error => {
            console.error('Error al cargar los mensajes:', error);
            currentRoomId = null;
            
            const chatMain = document.getElementById('chatMain');
            chatMain.innerHTML = `
                <div style="display: flex; height: 100%; align-items: center; justify-content: center; flex-direction: column;">
                    <h3>Error al cargar el chat</h3>
                    <p>${error.message}</p>
                    <button id="btnRetry">Reintentar</button>
                </div>
            `;
            
            document.getElementById('btnRetry').addEventListener('click', () => {
                loadRoom(roomId);
            });
        });
}
    
function sendMessage() {
    if (!isAuthenticated) {
        console.warn('Intentando enviar mensaje sin estar autenticado, reintentando autenticación...');
        socket.emit('authenticate', { userId, userName });
        return;
    }
    
    const messageInput = document.getElementById('messageInput');
    const content = messageInput.value.trim();
    
    if (!content || !currentRoomId) return;

    console.log('Enviando mensaje al WebSocket:', { roomId: currentRoomId, content, type: 'text' });
    
    socket.emit('send_message', {
        roomId: currentRoomId,
        content,
        type: 'text'
    });
    
    fetch(`/chat/rooms/${currentRoomId}/messages`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            content: content,
            type: 'text',
            senderId: userId,
            senderName: userName
        })
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Error al enviar el mensaje');
        }
        return response.json();
    })
    .then(data => {
        console.log('Respuesta del servidor Symfony:', data);
    })
    .catch(error => {
        console.error('Error al enviar el mensaje a Symfony:', error);
        addSystemMessage('Error al enviar el mensaje. Inténtalo de nuevo.');
    });
    
    messageInput.value = '';
}
    
    function addMessageToChat(message, scroll = true) {
        const messagesContainer = document.querySelector('.chat-messages');
        if (!messagesContainer) return;
        
        const messageDiv = document.createElement('div');
        
        if (message.type === 'system') {
            messageDiv.className = 'message message-system';
            messageDiv.textContent = message.content;
        } else {
            if (message.senderName == "Anonymous User"){}
            else {
            const isSentByMe = message.senderId === userId.toString();
            messageDiv.className = `message ${isSentByMe ? 'message-sent' : 'message-received'}`;
            
            let timestamp = message.timestamp;
            if (typeof timestamp === 'string') {
                timestamp = new Date(timestamp);
            }
            
            const formattedTime = timestamp instanceof Date 
                ? timestamp.toLocaleTimeString() 
                : 'ahora';
            
            messageDiv.innerHTML = `
                <div><strong>${message.senderName}</strong></div>
                <div>${message.content}</div>
                <div><small>${formattedTime}</small></div>
            `;
            }
        }
        
        messagesContainer.prepend(messageDiv);
        
        if (scroll) {
            messagesContainer.scrollTop = 0;
        }
    }

    function addMessageToChatOrdered(message, scroll = true) {
    const messagesContainer = document.querySelector('.chat-messages');
    if (!messagesContainer) return;
    
    const existingMessage = document.querySelector(`.message[data-id="${message.id}"]`);
    if (existingMessage) {
        console.log(`Mensaje con ID ${message.id} ya existe, ignorando duplicado`);
        return;
    }
    
    if (!message.content) {
        console.warn('Intentando mostrar mensaje sin contenido', message);
        return;
    }
    
    const messageDiv = document.createElement('div');
    
    messageDiv.setAttribute('data-id', message.id || `temp_${Date.now()}`);
    messageDiv.setAttribute('data-sender', message.senderId || 'unknown');
    messageDiv.setAttribute('data-time', message.timestamp?.getTime() || Date.now());
    
    if (message.type === 'system') {
        messageDiv.className = 'message message-system';
        messageDiv.textContent = message.content;
    } else {
        if (message.senderName === "Anonymous User" || !message.senderName) {
            message.senderName = "Usuario " + (message.senderId || "Desconocido");
        }
        
        const isSentByMe = message.senderId === userId.toString();
        messageDiv.className = `message ${isSentByMe ? 'message-sent' : 'message-received'}`;
        
        let timestamp = message.timestamp;
        if (typeof timestamp === 'string') {
            timestamp = new Date(timestamp);
        }
        
        if (!timestamp || isNaN(timestamp)) {
            timestamp = new Date();
        }
        
        const formattedTime = timestamp instanceof Date 
            ? timestamp.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})
            : 'ahora';
        
        messageDiv.innerHTML = `
            <div class="message-header"><strong>${message.senderName}</strong></div>
            <div class="message-content">${message.content}</div>
            <div class="message-timestamp"><small>${formattedTime}</small></div>
        `;
    }
    
    messagesContainer.appendChild(messageDiv);
    
    const noMessagesEl = document.querySelector('.no-messages');
    if (noMessagesEl) {
        noMessagesEl.remove();
    }
    
    if (scroll) {
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }
    
    console.log(`Mensaje mostrado: ID=${message.id || 'sin ID'}, Emisor=${message.senderName}, Contenido=${message.content.substring(0, 20)}...`);
}
    
function updateTypingIndicator(data) {
    console.log('Actualizando indicador de escritura:', data);
    
    let typingIndicator = document.getElementById('typingIndicator');
    
    if (!typingIndicator) {
        console.warn('No se encontró el indicador de escritura, intentando crear uno nuevo');
        
        const chatMain = document.getElementById('chatMain');
        if (!chatMain) {
            console.error('No se encontró el contenedor del chat');
            return;
        }
        
        typingIndicator = document.createElement('div');
        typingIndicator.className = 'typing-indicator';
        typingIndicator.id = 'typingIndicator';
        typingIndicator.style.display = 'none';
        
        const chatInput = chatMain.querySelector('.chat-input');
        if (chatInput) {
            chatMain.insertBefore(typingIndicator, chatInput);
        } else {
            chatMain.appendChild(typingIndicator);
        }
        
        chatMain.style.position = 'relative';
    }
    
    if (data.isTyping) {
        typingIndicator.textContent = `${data.userName} está escribiendo...`;
        typingIndicator.style.display = 'block';
        
        typingIndicator.style.opacity = '1';
        typingIndicator.style.visibility = 'visible';
        
        console.log('Mostrando indicador:', typingIndicator.textContent);
    } else {
        console.log('Ocultando indicador de escritura');
        
        setTimeout(() => {
            if (typingIndicator) {
                typingIndicator.style.display = 'none';
            }
        }, 500);
    }
}

function addSystemMessage(content) {
    const messagesContainer = document.querySelector('.chat-messages');
    if (!messagesContainer) return;
    
    const messageDiv = document.createElement('div');
    messageDiv.className = 'message message-system';
    messageDiv.textContent = content;
    
    messagesContainer.appendChild(messageDiv);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
}
});
</script>
{% endblock %}
{% endblock %}