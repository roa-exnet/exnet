{# src/ModuloChat/templates/chat.html.twig #}
{% extends 'base.html.twig' %}

{% block title %}Chat{% endblock %}

{% block head %}
    {{ parent() }}
    <link rel="stylesheet" href="{{ asset('css/chat.css') }}">
{% endblock %}

{% block body %}
<div class="chat-container">
    <div class="chat-sidebar">
        <h2 style="padding: 15px;">Chats</h2>
        
        <div class="chat-list">
            <div style="padding: 15px;">Cargando conversaciones...</div>
        </div>
        
        <div class="chat-actions">
            <button id="btnNewChat">Nuevo chat</button>
        </div>
    </div>
    
    <div class="chat-main" id="chatMain">
        <div style="display: flex; height: 100%; align-items: center; justify-content: center;">
            <h3>Selecciona un chat para comenzar</h3>
        </div>
    </div>
</div>

<!-- Modal para nuevo chat privado -->
<div id="chatModal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h2>Nuevo chat</h2>
        <form id="chatForm">
            <div style="margin-bottom: 15px;">
                <label for="chatName">Nombre del chat:</label>
                <input type="text" id="chatName" name="chatName" required>
            </div>
            <div style="margin-bottom: 15px;" class="form-user-search">
                <label for="userSearch">Buscar usuario:</label>
                <div class="search-container">
                    <input type="text" id="userSearch" name="userSearch" placeholder="Buscar por nombre o email...">
                    <div id="searchResults" class="search-results"></div>
                </div>
                <div id="selectedUsers" class="selected-users"></div>
                <input type="hidden" id="recipientIds" name="recipientIds">
            </div>
            <button type="submit">Crear chat</button>
        </form>
    </div>
</div>

{% block javascripts %}
<script src="https://cdn.socket.io/4.7.2/socket.io.min.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Información de usuario
    const userId = {{ userId|json_encode|raw }};
    const userName = {{ userName|json_encode|raw }};
    const websocketUrl = {{ websocketUrl|json_encode|raw }};
    
    // Inicializar la conexión WebSocket
    const socket = io(websocketUrl);
    let currentRoomId = null;
    
    // Eventos de conexión
    socket.on('connect', () => {
        console.log('Conectado al servidor WebSocket');
        
        // Autenticar al usuario
        socket.emit('authenticate', { userId, userName });
    });
    
    socket.on('authenticated', (data) => {
        console.log('Autenticado como:', data.userName);
        loadUserRooms(userId); // Cargar las salas específicas del usuario
    });
    
    socket.on('disconnect', () => {
        console.log('Desconectado del servidor WebSocket');
    });
    
    socket.on('error', (error) => {
        console.error('Error WebSocket:', error);
    });
    
    // Eventos para mensajes y actualizaciones
    socket.on('message', (message) => {
        if (message.roomId === currentRoomId) {
            addMessageToChat(message);
        }
    });
    
    socket.on('user_joined', (data) => {
        if (data.roomId === currentRoomId) {
            const systemMessage = {
                id: `system_${Date.now()}`,
                roomId: data.roomId,
                senderId: 'system',
                senderName: 'System',
                content: `${data.userName} se ha unido al chat`,
                type: 'system',
                timestamp: new Date()
            };
            
            addMessageToChat(systemMessage);
        }
    });
    
    socket.on('user_left', (data) => {
        if (data.roomId === currentRoomId) {
            const systemMessage = {
                id: `system_${Date.now()}`,
                roomId: data.roomId,
                senderId: 'system',
                senderName: 'System',
                content: `${data.userName} ha abandonado el chat`,
                type: 'system',
                timestamp: new Date()
            };
            
            addMessageToChat(systemMessage);
        }
    });
    
    socket.on('user_typing', (data) => {
        if (data.roomId === currentRoomId && data.userId !== userId) {
            updateTypingIndicator(data);
        }
    });
    
    socket.on('room_created', (data) => {
        console.log('Nueva sala creada:', data);
        loadUserRooms(userId); // Corregido: cambiado de LoadUserRooms a loadUserRooms
    });
    
    // Variables para el modal
    const chatModal = document.getElementById('chatModal');
    const btnNewChat = document.getElementById('btnNewChat');
    const closeBtn = document.querySelector('.close');
    
    // Setup para el autocompletado de usuario
    const userSearch = document.getElementById('userSearch');
    const searchResults = document.getElementById('searchResults');
    const selectedUsers = document.getElementById('selectedUsers');
    const recipientIdsInput = document.getElementById('recipientIds');
    let selectedRecipients = [];
    
    // Función para buscar usuarios
    let searchTimeout;
    userSearch.addEventListener('input', function() {
        clearTimeout(searchTimeout);
        const query = this.value.trim();
        
        if (query.length < 2) {
            searchResults.innerHTML = '';
            searchResults.style.display = 'none';
            return;
        }
        
        searchTimeout = setTimeout(() => {
            // En una implementación real, harías una petición AJAX al servidor
            // Por ahora, simularemos una respuesta con datos ficticios
            simulateUserSearch(query);
        }, 300);
    });
    
    // Función para simular la búsqueda de usuarios (reemplazar con AJAX real)
    function simulateUserSearch(query) {
        // Mostrar indicador de carga
        searchResults.innerHTML = '<div class="loading">Buscando usuarios...</div>';
        searchResults.style.display = 'block';
        
        // Realizar la petición al endpoint de búsqueda
        fetch(`/chat/api/users/search?q=${encodeURIComponent(query)}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Error en la respuesta del servidor: ' + response.status);
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    console.log(`Encontrados ${data.users.length} usuarios para la consulta: "${query}"`);
                    displaySearchResults(data.users);
                } else {
                    console.error('Error en la búsqueda:', data.error || 'Error desconocido');
                    searchResults.innerHTML = '<div class="no-results">Error al buscar usuarios</div>';
                    searchResults.style.display = 'block';
                }
            })
            .catch(error => {
                console.error('Error al buscar usuarios:', error);
                searchResults.innerHTML = '<div class="no-results">Error al conectar con el servidor</div>';
                searchResults.style.display = 'block';
            });
    }
    
    // Mostrar resultados de búsqueda
    function displaySearchResults(users) {
        searchResults.innerHTML = '';
        
        if (!users || users.length === 0) {
            searchResults.innerHTML = '<div class="no-results">No se encontraron usuarios</div>';
            searchResults.style.display = 'block';
            return;
        }
        
        users.forEach(user => {
            // No mostrar usuarios ya seleccionados
            if (selectedRecipients.some(selected => selected.id === user.id)) {
                return;
            }
            
            const userElement = document.createElement('div');
            userElement.className = 'user-result';
            userElement.innerHTML = `
                <div class="user-info">
                    <div class="user-name">${user.nombre}</div>
                    <div class="user-email">${user.email}</div>
                </div>
            `;
            
            userElement.addEventListener('click', () => {
                selectUser(user);
                searchResults.style.display = 'none';
                userSearch.value = '';
            });
            
            searchResults.appendChild(userElement);
        });
        
        searchResults.style.display = 'block';
    }
    
    // Seleccionar un usuario
    function selectUser(user) {
        // Verificar si el usuario ya está seleccionado
        if (selectedRecipients.some(selected => selected.id === user.id)) {
            return;
        }
        
        selectedRecipients.push(user);
        updateSelectedUsers();
        updateRecipientIds();
    }
    
    // Actualizar la lista de usuarios seleccionados
    function updateSelectedUsers() {
        selectedUsers.innerHTML = '';
        
        selectedRecipients.forEach(user => {
            const userTag = document.createElement('div');
            userTag.className = 'user-tag';
            userTag.innerHTML = `
                <span>${user.nombre}</span>
                <button type="button" class="remove-user" data-id="${user.id}">&times;</button>
            `;
            
            selectedUsers.appendChild(userTag);
        });
        
        // Eventos para eliminar usuarios
        document.querySelectorAll('.remove-user').forEach(button => {
            button.addEventListener('click', function() {
                const userId = parseInt(this.getAttribute('data-id'));
                selectedRecipients = selectedRecipients.filter(user => user.id !== userId);
                updateSelectedUsers();
                updateRecipientIds();
            });
        });
        
        // Mostrar u ocultar el contenedor según si hay usuarios seleccionados
        selectedUsers.style.display = selectedRecipients.length > 0 ? 'flex' : 'none';
    }
    
    // Actualizar el campo oculto con los IDs de los destinatarios
    function updateRecipientIds() {
        const ids = selectedRecipients.map(user => user.id);
        recipientIdsInput.value = ids.join(',');
    }
    
    // Abrir modal
    btnNewChat.addEventListener('click', function() {
        chatModal.style.display = "block";
        // Reiniciar el formulario
        document.getElementById('chatForm').reset();
        selectedRecipients = [];
        updateSelectedUsers();
        updateRecipientIds();
    });
    
    // Cerrar modal
    closeBtn.addEventListener('click', function() {
        chatModal.style.display = "none";
    });
    
    // Cerrar al hacer clic fuera
    window.addEventListener('click', function(event) {
        if (event.target == chatModal) {
            chatModal.style.display = "none";
        }
    });
    
    // Cerrar resultados de búsqueda al hacer clic fuera
    document.addEventListener('click', function(event) {
        if (!event.target.closest('.search-container')) {
            searchResults.style.display = 'none';
        }
    });
    
    // Evitar múltiples envíos del formulario
    let isSubmitting = false;
    
    // Manejar el envío del formulario de chat
    document.getElementById('chatForm').addEventListener('submit', function(e) {
        e.preventDefault();
        
        if (isSubmitting) return;
        isSubmitting = true;
        
        const chatName = document.getElementById('chatName').value;
        const recipientIds = document.getElementById('recipientIds').value.split(',');
        const submitButton = this.querySelector('button[type="submit"]');
        
        // Validar que haya al menos un destinatario
        if (recipientIds.length === 0 || recipientIds[0] === '') {
            alert('Debes seleccionar al menos un destinatario');
            isSubmitting = false;
            return;
        }
        
        // Deshabilitar el botón mientras se procesa
        if (submitButton) submitButton.disabled = true;
        
        // Crear sala utilizando la API WebSocket
        createRoom(chatName, recipientIds)
            .then(data => {
                isSubmitting = false;
                if (submitButton) submitButton.disabled = false;
                
                chatModal.style.display = "none";
                loadUserRooms(userId); // Recargar las salas
            })
            .catch(error => {
                isSubmitting = false;
                if (submitButton) submitButton.disabled = false;
                console.error('Error:', error);
                alert('Ha ocurrido un error al crear el chat.');
            });
    });
    
    // Función para crear una nueva sala
    function createRoom(name, participantIds) {
        return fetch(`/chat/rooms`, {  // URL actualizada para usar el endpoint de Symfony
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                name,
                creatorId: userId,
                creatorName: userName,
                participantIds
            })
        }).then(response => {
            if (!response.ok) {
                throw new Error('Error al crear la sala');
            }
            return response.json();
        });
    }

    // Función para cargar las salas del usuario
    function loadUserRooms(userId) {
        fetch(`/chat/user/rooms?userId=${userId}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`Error de servidor: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                const chatList = document.querySelector('.chat-list');
                
                if (!data.success) {
                    chatList.innerHTML = `<div style="padding: 15px;">Error: ${data.error || 'Error desconocido'}</div>`;
                    return;
                }
                
                if (!data.rooms || data.rooms.length === 0) {
                    chatList.innerHTML = '<div style="padding: 15px;">No tienes chats disponibles</div>';
                    return;
                }
                
                chatList.innerHTML = '';
                
                data.rooms.forEach(room => {
                    const roomElement = document.createElement('div');
                    roomElement.className = 'chat-list-item';
                    roomElement.setAttribute('data-room-id', room.id);
                    roomElement.innerHTML = `
                        <strong>${room.name}</strong>
                        <div>
                            <small>${room.participants} participante(s)</small>
                        </div>
                    `;
                    
                    // Evento click para cargar el chat
                    roomElement.addEventListener('click', function() {
                        document.querySelectorAll('.chat-list-item').forEach(el => {
                            el.classList.remove('active');
                        });
                        this.classList.add('active');
                        
                        const roomId = this.getAttribute('data-room-id');
                        loadRoom(roomId);
                    });
                    
                    chatList.appendChild(roomElement);
                });
            })
            .catch(error => {
                console.error('Error al cargar las salas del usuario:', error);
                document.querySelector('.chat-list').innerHTML = 
                    `<div style="padding: 15px; color: red;">Error al cargar las salas: ${error.message}</div>`;
            });
    }
        
    // Función para cargar una sala específica
    function loadRoom(roomId) {
        // Si estamos en una sala, salimos
        if (currentRoomId) {
            socket.emit('leave_room', { roomId: currentRoomId, userId });
        }
        
        currentRoomId = roomId;
        
        // Unirse a la nueva sala (WebSocket para tiempo real)
        socket.emit('join_room', { roomId, userId });
        
        // Cargar mensajes previos desde Symfony (no del WebSocket)
        fetch(`/chat/rooms/${roomId}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`Error de servidor: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                if (!data.success) {
                    throw new Error(data.error || 'Error desconocido');
                }
                
                // Crear la interfaz del chat
                const chatMain = document.getElementById('chatMain');
                chatMain.innerHTML = `
                    <div class="chat-header">
                        <h2>${data.room.name}</h2>
                        <div class="participants-count">${data.room.participants.length} participantes</div>
                    </div>
                    <div class="chat-messages"></div>
                    <div class="typing-indicator" style="display: none;"></div>
                    <div class="chat-input">
                        <input type="text" id="messageInput" placeholder="Escribe un mensaje...">
                        <button id="sendButton">Enviar</button>
                    </div>
                `;
                
                const messagesContainer = document.querySelector('.chat-messages');
                
                // Mostrar mensajes en orden cronológico inverso
                if (data.messages && data.messages.length > 0) {
                    // Ordenar por fecha, del más reciente al más antiguo
                    const sortedMessages = data.messages.sort((a, b) => 
                        new Date(b.sentAt) - new Date(a.sentAt)
                    );
                    
                    sortedMessages.forEach(message => {
                        addMessageToChat({
                            senderId: message.senderId,
                            senderName: message.senderName,
                            content: message.content,
                            type: message.type,
                            timestamp: new Date(message.sentAt)
                        }, false);
                    });
                } else {
                    // No hay mensajes
                    messagesContainer.innerHTML = '<div class="no-messages">Aún no hay mensajes en este chat.</div>';
                }
                
                // Configurar el envío de mensajes
                const messageInput = document.getElementById('messageInput');
                const sendButton = document.getElementById('sendButton');
                
                sendButton.addEventListener('click', () => {
                    sendMessage();
                });
                
                messageInput.addEventListener('keypress', (e) => {
                    if (e.key === 'Enter') {
                        sendMessage();
                    }
                });
                
                // Detectar cuando el usuario está escribiendo
                let typingTimeout;
                messageInput.addEventListener('input', () => {
                    socket.emit('typing', { roomId, userId, userName, isTyping: true });
                    
                    clearTimeout(typingTimeout);
                    typingTimeout = setTimeout(() => {
                        socket.emit('typing', { roomId, userId, userName, isTyping: false });
                    }, 1000);
                });
            })
            .catch(error => {
                console.error('Error al cargar los mensajes:', error);
                currentRoomId = null;
                
                const chatMain = document.getElementById('chatMain');
                chatMain.innerHTML = `
                    <div style="display: flex; height: 100%; align-items: center; justify-content: center; flex-direction: column;">
                        <h3>Error al cargar el chat</h3>
                        <p>${error.message}</p>
                        <button id="btnRetry">Reintentar</button>
                    </div>
                `;
                
                document.getElementById('btnRetry').addEventListener('click', () => {
                    loadRoom(roomId);
                });
            });
    }
    
    // Función para enviar un mensaje
    function sendMessage() {
        const messageInput = document.getElementById('messageInput');
        const content = messageInput.value.trim();
        
        if (!content || !currentRoomId) return;
        
        // Enviar al WebSocket para tiempo real
        socket.emit('send_message', {
            roomId: currentRoomId,
            content,
            type: 'text'
        });
        
        // También enviar a Symfony para persistencia
        fetch(`/chat/rooms/${currentRoomId}/messages`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                senderId: userId,
                senderName: userName,
                content: content,
                type: 'text'
            })
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Error al enviar el mensaje');
            }
            return response.json();
        })
        .then(data => {
            if (!data.success) {
                console.error('Error al guardar el mensaje:', data.error);
            }
        })
        .catch(error => {
            console.error('Error al enviar el mensaje:', error);
        });
        
        // Limpiar el campo de entrada
        messageInput.value = '';
        
        // Opcionalmente, añadir el mensaje inmediatamente a la interfaz 
        // para mejor experiencia de usuario (opcional si el WebSocket ya lo maneja)
        const tempMessage = {
            id: `temp_${Date.now()}`,
            senderId: userId,
            senderName: userName,
            content: content,
            type: 'text',
            timestamp: new Date()
        };
        
        addMessageToChat(tempMessage);
    }
    
    // Función para añadir un mensaje al chat
    function addMessageToChat(message, scroll = true) {
        const messagesContainer = document.querySelector('.chat-messages');
        if (!messagesContainer) return;
        
        const messageDiv = document.createElement('div');
        
        if (message.type === 'system') {
            messageDiv.className = 'message message-system';
            messageDiv.textContent = message.content;
        } else {
            const isSentByMe = message.senderId === userId.toString();
            messageDiv.className = `message ${isSentByMe ? 'message-sent' : 'message-received'}`;
            
            // Formatear fecha si es string
            let timestamp = message.timestamp;
            if (typeof timestamp === 'string') {
                timestamp = new Date(timestamp);
            }
            
            const formattedTime = timestamp instanceof Date 
                ? timestamp.toLocaleTimeString() 
                : 'ahora';
            
            messageDiv.innerHTML = `
                <div><strong>${message.senderName}</strong></div>
                <div>${message.content}</div>
                <div><small>${formattedTime}</small></div>
            `;
        }
        
        // Insertar al principio para mantener orden inverso
        messagesContainer.prepend(messageDiv);
        
        // Scroll al final del chat (que es arriba en flex-direction: column-reverse)
        if (scroll) {
            messagesContainer.scrollTop = 0;
        }
    }
    
    // Función para actualizar el indicador de escritura
    function updateTypingIndicator(data) {
        const typingIndicator = document.querySelector('.typing-indicator');
        if (!typingIndicator) return;
        
        if (data.isTyping) {
            typingIndicator.textContent = `${data.userName} está escribiendo...`;
            typingIndicator.style.display = 'block';
        } else {
            typingIndicator.style.display = 'none';
        }
    }
});
</script>
{% endblock %}
{% endblock %}