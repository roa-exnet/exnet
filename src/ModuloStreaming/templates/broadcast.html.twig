{% extends 'base.html.twig' %}

{% block title %}Transmitiendo - Exnet{% endblock %}

{% block head %}
    {{ parent() }}
    <link rel="stylesheet" href="{{ asset('css/streaming.css') }}">
    <script src="{{ asset('js/ModuloStreaming/streaming-client.js') }}"></script>
{% endblock %}

{% block body %}
<div class="exnet-container-transparent p-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="exnet-main-title mb-0">Transmisión en Vivo</h1>
        <a href="{{ path('streaming_index') }}" class="exnet-btn-small">
            <i class="fas fa-arrow-left"></i> Volver
        </a>
    </div>
    
    <div class="row">
        <div class="col-md-8">
            <div class="video-container mb-4">
                <video id="localVideo" autoplay muted playsinline></video>
                <div id="streamControls" class="stream-controls">
                    <button id="btnStartStream" class="exnet-btn-blue">
                        <i class="fas fa-play"></i> Iniciar transmisión
                    </button>
                    <button id="btnStopStream" class="exnet-btn-red" style="display: none;">
                        <i class="fas fa-stop"></i> Detener transmisión
                    </button>
                </div>
                <div id="streamStatus" class="stream-status"></div>
            </div>
            
            <div class="stream-info mb-4">
                <div class="form-group">
                    <label for="streamTitle" class="text-white">Título de la transmisión:</label>
                    <input type="text" id="streamTitle" class="form-control" 
                           placeholder="Mi transmisión en vivo" value="Transmisión de {{ user.nombre }}">
                </div>
                
                <div class="stream-details mt-3">
                    <p class="text-white">ID de sala: <span id="roomIdDisplay">{{ roomId }}</span></p>
                    <p class="text-white">Enlace para compartir: 
                        <span id="shareLink">{{ app.request.schemeAndHttpHost }}{{ path('streaming_view', {'roomId': roomId}) }}</span>
                        <button id="btnCopyLink" class="exnet-btn-small">
                            <i class="fas fa-copy"></i>
                        </button>
                    </p>
                </div>
            </div>
        </div>
        
        <div class="col-md-4">
            <div class="chat-container">
                <h3 class="exnet-subtitle">Chat en vivo</h3>
                <div id="chatMessages" class="chat-messages"></div>
                <div class="chat-input">
                    <input type="text" id="chatMessageInput" class="form-control" 
                           placeholder="Escribe un mensaje...">
                    <button id="btnSendMessage" class="exnet-btn-blue mt-2">Enviar</button>
                </div>
            </div>
            
            <div class="viewers-container mt-4">
                <h3 class="exnet-subtitle">Espectadores</h3>
                <div id="viewersList" class="viewers-list">
                    <p class="text-white text-center">No hay espectadores todavía</p>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    // Configuración
    const wsServerUrl = "{{ wsServerUrl }}";
    const roomId = "{{ roomId }}";
    const userId = "{{ user.id }}";
    const userName = "{{ user.nombre }} {{ user.apellidos }}";
    
    let streamingClient = null;
    let localStream = null;
    let isStreaming = false;
    
    document.addEventListener('DOMContentLoaded', () => {
        // Referencias a elementos del DOM
        const localVideo = document.getElementById('localVideo');
        const btnStartStream = document.getElementById('btnStartStream');
        const btnStopStream = document.getElementById('btnStopStream');
        const streamStatus = document.getElementById('streamStatus');
        const streamTitle = document.getElementById('streamTitle');
        const btnCopyLink = document.getElementById('btnCopyLink');
        const chatMessages = document.getElementById('chatMessages');
        const chatMessageInput = document.getElementById('chatMessageInput');
        const btnSendMessage = document.getElementById('btnSendMessage');
        const viewersList = document.getElementById('viewersList');
        
        // Inicializar cliente de streaming
        streamingClient = new StreamingClient(wsServerUrl, {
            clientId: `user_${userId}`,
            autoReconnect: true,
            onConnect: () => {
                console.log('Conectado al servidor de streaming');
                updateStreamStatus('Conectado al servidor', 'success');
                
                // Unirse automáticamente a la sala como anfitrión
                streamingClient.send({
                    type: 'join-room',
                    roomId: roomId,
                    role: 'broadcaster',
                    userName: userName
                });
            },
            onDisconnect: () => {
                console.log('Desconectado del servidor de streaming');
                updateStreamStatus('Desconectado del servidor', 'error');
                
                if (isStreaming) {
                    stopStreaming();
                }
            },
            onMessage: (message) => {
                console.log('Mensaje recibido:', message);
                
                // Manejar diferentes tipos de mensajes
                switch(message.type) {
                    case 'chat':
                        addChatMessage(message.sender, message.message);
                        break;
                    case 'viewer-joined':
                        updateViewersList(message.viewers);
                        addChatMessage('Sistema', `${message.userName} se unió a la transmisión`);
                        break;
                    case 'viewer-left':
                        updateViewersList(message.viewers);
                        addChatMessage('Sistema', `${message.userName} abandonó la transmisión`);
                        break;
                }
            },
            onError: (error) => {
                console.error('Error en el cliente de streaming:', error);
                updateStreamStatus('Error de conexión', 'error');
            }
        });
        
        // Conectar al servidor
        streamingClient.connect();
        
        // Acceder a la cámara y micrófono del usuario
        setupLocalMedia();
        
        // Eventos de los botones
        btnStartStream.addEventListener('click', () => {
            startStreaming();
        });
        
        btnStopStream.addEventListener('click', () => {
            stopStreaming();
        });
        
        btnCopyLink.addEventListener('click', () => {
            const shareLink = document.getElementById('shareLink');
            navigator.clipboard.writeText(shareLink.textContent)
                .then(() => {
                    alert('Enlace copiado al portapapeles');
                })
                .catch(err => {
                    console.error('Error al copiar:', err);
                });
        });
        
        btnSendMessage.addEventListener('click', () => {
            sendChatMessage();
        });
        
        chatMessageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                sendChatMessage();
            }
        });
        
        // Funciones auxiliares
        async function setupLocalMedia() {
            try {
                localStream = await navigator.mediaDevices.getUserMedia({
                    audio: true,
                    video: true
                });
                
                localVideo.srcObject = localStream;
                updateStreamStatus('Cámara y micrófono listos', 'success');
            } catch (error) {
                console.error('Error accediendo a la cámara y micrófono:', error);
                updateStreamStatus('Error accediendo a la cámara y micrófono', 'error');
            }
        }
        
        function startStreaming() {
            if (!localStream) {
                updateStreamStatus('No hay acceso a la cámara y micrófono', 'error');
                return;
            }
            
            const title = streamTitle.value || `Transmisión de ${userName}`;
            
            streamingClient.send({
                type: 'stream-start',
                roomId: roomId,
                streamTitle: title,
                streamerName: userName
            });
            
            isStreaming = true;
            updateStreamStatus('Transmitiendo en vivo', 'success');
            btnStartStream.style.display = 'none';
            btnStopStream.style.display = 'inline-block';
        }
        
        function stopStreaming() {
            streamingClient.send({
                type: 'stream-stop',
                roomId: roomId
            });
            
            isStreaming = false;
            updateStreamStatus('Transmisión detenida', 'warning');
            btnStartStream.style.display = 'inline-block';
            btnStopStream.style.display = 'none';
        }
        
        function updateStreamStatus(message, status) {
            streamStatus.textContent = message;
            streamStatus.className = 'stream-status';
            streamStatus.classList.add(`status-${status}`);
        }
        
        function sendChatMessage() {
            const message = chatMessageInput.value.trim();
            if (!message) return;
            
            streamingClient.send({
                type: 'chat',
                roomId: roomId,
                message: message,
                sender: userName
            });
            
            addChatMessage('Tú', message);
            chatMessageInput.value = '';
        }
        
        function addChatMessage(sender, message) {
            const messageElement = document.createElement('div');
            messageElement.className = 'chat-message';
            messageElement.innerHTML = `
                <span class="chat-sender">${sender}:</span>
                <span class="chat-text">${message}</span>
            `;
            chatMessages.appendChild(messageElement);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
        
        function updateViewersList(viewers) {
            if (!viewers || viewers.length === 0) {
                viewersList.innerHTML = '<p class="text-white text-center">No hay espectadores todavía</p>';
                return;
            }
            
            let viewersHtml = '';
            viewers.forEach(viewer => {
                viewersHtml += `<div class="viewer-item">${viewer.userName}</div>`;
            });
            
            viewersList.innerHTML = viewersHtml;
        }
    });
</script>
{% endblock %}